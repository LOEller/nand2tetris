class Snake {

   field SnakeSegment firstSegment;

   constructor Snake new() {
      // create the head of the snake at (20, 20) moving down
      let firstSegment = SnakeSegment.new(20, 20, 2);
      return this;
   }

   method void dispose() {
      do firstSegment.dispose(); // recursively deletes all snake segments 
      do Memory.deAlloc(this);
      return;
   }

   method void setDirection(int direction) {
     do firstSegment.setDirection(direction);
     return;
   }

   method int getHeadLeftBound() {
    return firstSegment.getX();
   }

   method int getHeadRightBound() {
    return firstSegment.getX() + firstSegment.getSize();
   }

   method int getHeadTopBound() {
    return firstSegment.getY();
   }

   method int getHeadBottomBound() {
    return firstSegment.getY() + firstSegment.getSize();
   }

   // goes through the list of snake segments and calls 
   // draw on each one
   method void drawSegments() {
      var SnakeSegment current;
      let current = firstSegment;
      while (~(current = null)) {
        do current.draw();
        let current = current.getNext();
      }
      return;
   }

   // goes through the list of snake segments and calls 
   // erase on each one
   method void eraseSegments() {
      var SnakeSegment current;
      let current = firstSegment;
      while (~(current = null)) {
        do current.erase();
        let current = current.getNext();
      }
      return;
   }

   // goes through the list of snake segments and updates their positions 
   // appropriately
   method void moveSegments() {
      var SnakeSegment current;
      let current = firstSegment;
      while (~(current = null)) {
        do current.move();
        let current = current.getNext();
      }
      return;
   }

   // adds a segment to this snake
   method void addSegment() {
    // TODO
    return;
   }
}
