class Snake {

   field SnakeSegment firstSegment;
   field int frameCounter;

   constructor Snake new() {
      // create the head of the snake at (20, 20) moving down
      let firstSegment = SnakeSegment.new(20, 20);
      do setDirection(2);
      let frameCounter = 0;
      return this;
   }

   method void dispose() {
      do firstSegment.dispose(); // recursively deletes all snake segments 
      do Memory.deAlloc(this);
      return;
   }

   method void setDirection(int direction) {
    if (direction = 1) {
      do firstSegment.setDeltaX(0);
      do firstSegment.setDeltaY(-1);
    }
    if (direction = 2) {
      do firstSegment.setDeltaX(0);
      do firstSegment.setDeltaY(1);
    }
    if (direction = 3) {
      do firstSegment.setDeltaX(-1);
      do firstSegment.setDeltaY(0);
    }
    if (direction = 4) {
      do firstSegment.setDeltaX(1);
      do firstSegment.setDeltaY(0);
    }
     return;
   }

   method int getLeftBound() {
    return firstSegment.getX();
   }

   method int getRightBound() {
    return firstSegment.getX() + firstSegment.getSize();
   }

   method int getTopBound() {
    return firstSegment.getY();
   }

   method int getBottomBound() {
    return firstSegment.getY() + firstSegment.getSize();
   }

   method void eraseMoveDraw() {
     if (frameCounter = 40) {
       do eraseSegments();
       do moveSegments();
       do drawSegments();
       let frameCounter = 0;
     } else {
        let frameCounter = frameCounter + 1;
     }
     return;
   }

   // goes through the list of snake segments and calls 
   // draw on each one
   method void drawSegments() {
      var SnakeSegment current;
      let current = firstSegment;
      while (~(current = null)) {
        do current.draw();
        let current = current.getNext();
      }
      return;
   }

   // goes through the list of snake segments and calls 
   // erase on each one
   method void eraseSegments() {
      var SnakeSegment current;
      let current = firstSegment;
      while (~(current = null)) {
        do current.erase();
        let current = current.getNext();
      }
      return;
   }

   // goes through the list of snake segments and updates their positions 
   // appropriately
   method void moveSegments() {
      var SnakeSegment current;
      let current = firstSegment;
      while (~(current = null)) {
        do current.move();
        let current = current.getNext();
      }
      return;
   }

   // adds a segment to this snake
   method void addSegment() {
    // TODO
    return;
   }
}
