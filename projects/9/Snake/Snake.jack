class Snake {

   field int length, direction, size, speed;
   field Array xHist;
   field Array yHist;

   constructor Snake new() {
      let length = 1;
      let xHist = Array.new(256);
      let yHist = Array.new(256);
      let size = 10; // the size of each snake "segment"
      let speed = 1;

      // create the head of the snake at (20, 20) moving down
      let xHist[0] = 20; 
      let yHist[0] = 20; 
      do setDirection(2);
      return this;
   }

   // TODO you don't have to redraw the entire snake every time!!!
   // just erase the last segment of the snake and then draw a new one
   // in the direction that the head is moving

   // this way the draw move erase loop is always drawing one new square
   // and erasing one square every loop so it does not slow 
   // down the game as the snake gets longer!!!

   method void dispose() {
      do xHist.dispose();
      do yHist.dispose();
      do Memory.deAlloc(this);
      return;
   }

   // Sets direction of the head of the snake 
   method void setDirection(int Adirection) {
     let direction = Adirection;
     return;
   }

   method void eraseMoveDraw() {
      do erase();
      do moveHead();
      do updateHistory();
      do draw();
      return;
   }

   // draw the entire snake
   method void draw() {
      var int i, x, y;

      let i = 0;
      while (i < length) {
        let x = xHist[i];
        let y = yHist[i];
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + size, y + size);
        let i = i + 1;
      }
      return;
   }

   // erase the entire snake
   method void erase() {
      var int i, x, y;

      let i = 0;
      while (i < length) {
        let x = xHist[i];
        let y = yHist[i];
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + size, y + size);
        let i = i + 1;
      }
      return;
   }

   method void moveHead() {
      if (direction = 1) {
        let yHist[0] = yHist[0] - speed;
      }
      if (direction = 2) {
        let yHist[0] = yHist[0] + speed;
      }
      if (direction = 3) {
        let xHist[0] = xHist[0] - speed;
      }
      if (direction = 4) {
        let xHist[0] = xHist[0] + speed;
      }
      return;
   }

   // adds a segment to this snake
   method void addSegment() {
     let length = length + 1;
     return;
   }

   method void updateHistory() {
     // (xHist[1], yHist[1]) <- (xHist[0], yHist[0]) 
     // (xHist[2], yHist[2]) <- (xHist[1], yHist[1]) 
     // (xHist[2], yHist[2]) <- (xHist[2], yHist[2])
     // and so on... 
     return;
   }


   /* Bounds refer to the head of the snake only */

   method int getLeftBound() {
     return xHist[0];
   }

   method int getRightBound() {
     return xHist[0] + size;
   }

   method int getTopBound() {
     return yHist[0];
   }

   method int getBottomBound() {
     return yHist[0] + size;
   }
}