// Linked list node representing a single segment in the snake
class SnakeSegment {

   field int x, y, direction, size; 
   field SnakeSegment next;

   constructor SnakeSegment new(int ax, int ay, int adirection) {
      let x = ax;
      let y = ay;
      let direction = adirection;
      let size = 10;
      let next = null;
      return this;
   }

   method int getX() {
    return x;
   }

   method int getY() {
    return y;
   }

   method int getSize() {
    return size;
   }

   /** Disposes this snake segment and recursively all the ones after it. */
   method void dispose() {
      if (~(next = null)) {
        do next.dispose();
      }
      do Memory.deAlloc(this);
      return;
   }

   method SnakeSegment getNext() {
     return next;
   }

   method void draw() {
      // Draws the square using the color black
      do Screen.setColor(true);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

   method void erase() {
      // Draws the square using the color white (background color)
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

   method void setDirection(int Adirection) {
      let direction = Adirection;
      return;
   }

   method void move() {
      if (direction = 1) {
        // up
        let y = y - 1;
      } else {
        if (direction = 2) {
            // down
            let y = y + 1;
        } else {
          if (direction = 3) {
            // left
            let x = x - 1;
          } else {
            if (direction = 4) {
               // right
               let x = x + 1;
            }    
          }
        }  
      }
      return;
   }
}
