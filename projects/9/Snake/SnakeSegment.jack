// Linked list node representing a single segment in the snake
class SnakeSegment {

   field int x, y; 
   field SnakeSegment next;
   field SnakeSegment prev;
   static int size; // all snake segments have the same size

   constructor SnakeSegment new(int ax, int ay) {
      let x = ax;
      let y = ay;
      let size = 10;
      let next = null;
      let prev = null;
      return this;
   }

   /** Disposes this snake segment and recursively all the ones after it. */
   method void dispose() {
      if (~(next = null)) {
        do next.dispose();
      }
      do Memory.deAlloc(this);
      return;
   }

   method void draw() {
      // Draws the segment using the color black
      do Screen.setColor(true);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

   method void erase() {
      // Erases the segment using the color white (background color)
      do Screen.setColor(false);
      do Screen.drawRectangle(x, y, x + size, y + size);
      return;
   }

   method int getLeftBound() {
     return getX();
   }

   method int getRightBound() {
     return getX() + getSize();
   }

   method int getTopBound() {
     return getY();
   }

   method int getBottomBound() {
     return getY() + getSize();
   }

   /* Getters and Setters */

   method int getX() {
    return x;
   }

   method int getY() {
    return y;
   }

   method int getSize() {
    return size;
   }

   method SnakeSegment getNext() {
     return next;
   }

   method void setNext(SnakeSegment Anext) {
     let next = Anext;
     return;
   }

   method void setPrev(SnakeSegment Aprev) {
     let prev = Aprev;
     return;
   }
}
